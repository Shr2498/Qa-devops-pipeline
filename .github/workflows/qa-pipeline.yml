name: QA DevOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  
jobs:
  # Stage 1: Static Analysis and Code Quality
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarQube analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint code
      run: npm run lint
    
    - name: Security audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  # Stage 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: unit-test-coverage
        fail_ci_if_error: false

  # Stage 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run integration tests
      run: npm run test:integration

  # Stage 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'qa-devops-pipeline'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
      continue-on-error: true

  # Stage 5: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Build Docker image
      run: |
        docker build -t qa-devops-app:${{ github.sha }} .
        docker tag qa-devops-app:${{ github.sha }} qa-devops-app:latest
    
    - name: Save Docker image
      run: docker save qa-devops-app:latest | gzip > qa-devops-app.tar.gz
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: qa-devops-app.tar.gz

  # Stage 6: E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: docker load -i qa-devops-app.tar.gz
    
    - name: Start application
      run: |
        docker run -d -p 3000:3000 --name qa-app qa-devops-app:latest
        sleep 10  # Wait for app to start
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results
        path: tests/e2e/videos/
    
    - name: Stop application
      if: always()
      run: docker stop qa-app && docker rm qa-app

  # Stage 7: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: docker load -i qa-devops-app.tar.gz
    
    - name: Start application for performance testing
      run: |
        docker run -d -p 3000:3000 --name qa-perf-app qa-devops-app:latest
        sleep 10  # Wait for app to start
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: k6 run tests/performance/load-test.js
    
    - name: Stop performance test application
      if: always()
      run: docker stop qa-perf-app && docker rm qa-perf-app

  # Stage 8: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # In real scenario, this would deploy to staging server
        docker load -i qa-devops-app.tar.gz
        docker run -d -p 3001:3000 --name staging-app qa-devops-app:latest
    
    - name: Run staging smoke tests
      run: |
        sleep 10  # Wait for deployment
        curl -f http://localhost:3001/health || exit 1
        echo "Staging deployment successful"
    
    - name: Stop staging container (cleanup)
      if: always()
      run: docker stop staging-app && docker rm staging-app || true

  # Stage 9: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://qa-devops-app.production.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # In real scenario, this would deploy to production server
        docker load -i qa-devops-app.tar.gz
        docker run -d -p 3002:3000 --name production-app qa-devops-app:latest
    
    - name: Run production smoke tests
      run: |
        sleep 10  # Wait for deployment
        curl -f http://localhost:3002/health || exit 1
        echo "Production deployment successful"
    
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"
        echo "Application is now live at production environment"
    
    - name: Stop production container (cleanup for demo)
      if: always()
      run: docker stop production-app && docker rm production-app || true

  # Quality Gate Check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Check quality gate
      run: |
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "Integration tests failed"
          exit 1
        fi
        echo "Quality gate passed - All tests successful"
